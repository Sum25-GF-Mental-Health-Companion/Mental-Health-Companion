// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package queries

import (
	"context"
	"database/sql"
)

const addMessage = `-- name: AddMessage :one
INSERT INTO messages (session_id, sender, content)
VALUES ($1, $2, $3)
RETURNING id, session_id, sender, content, timestamp
`

type AddMessageParams struct {
	SessionID sql.NullInt32 `json:"session_id"`
	Sender    string        `json:"sender"`
	Content   string        `json:"content"`
}

func (q *Queries) AddMessage(ctx context.Context, arg AddMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, addMessage, arg.SessionID, arg.Sender, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Sender,
		&i.Content,
		&i.Timestamp,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, hashed_password, student_status)
VALUES ($1, $2, $3)
RETURNING id, email, hashed_password, student_status, created_at
`

type CreateUserParams struct {
	Email          string       `json:"email"`
	HashedPassword string       `json:"hashed_password"`
	StudentStatus  sql.NullBool `json:"student_status"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword, arg.StudentStatus)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.StudentStatus,
		&i.CreatedAt,
	)
	return i, err
}

const endSession = `-- name: EndSession :exec
UPDATE sessions SET ended_at = now() WHERE id = $1
`

func (q *Queries) EndSession(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, endSession, id)
	return err
}

const getSessionsByUser = `-- name: GetSessionsByUser :many
SELECT id, user_id, started_at, ended_at FROM sessions WHERE user_id = $1 ORDER BY started_at DESC
`

func (q *Queries) GetSessionsByUser(ctx context.Context, userID sql.NullInt32) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StartedAt,
			&i.EndedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSummaryBySession = `-- name: GetSummaryBySession :one
SELECT id, session_id, full_summary, compressed_summary, created_at FROM summaries 
WHERE session_id = $1 LIMIT 1
`

func (q *Queries) GetSummaryBySession(ctx context.Context, sessionID int32) (Summary, error) {
	row := q.db.QueryRowContext(ctx, getSummaryBySession, sessionID)
	var i Summary
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.FullSummary,
		&i.CompressedSummary,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, hashed_password, student_status, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.StudentStatus,
		&i.CreatedAt,
	)
	return i, err
}

const saveSummary = `-- name: SaveSummary :exec
INSERT INTO summaries (session_id, full_summary, compressed_summary)
VALUES ($1, $2, $3)
ON CONFLICT (session_id) DO UPDATE
SET full_summary = EXCLUDED.full_summary,
    compressed_summary = EXCLUDED.compressed_summary
`

type SaveSummaryParams struct {
	SessionID         int32          `json:"session_id"`
	FullSummary       sql.NullString `json:"full_summary"`
	CompressedSummary sql.NullString `json:"compressed_summary"`
}

func (q *Queries) SaveSummary(ctx context.Context, arg SaveSummaryParams) error {
	_, err := q.db.ExecContext(ctx, saveSummary, arg.SessionID, arg.FullSummary, arg.CompressedSummary)
	return err
}

const startSession = `-- name: StartSession :one
INSERT INTO sessions (user_id) VALUES ($1)
RETURNING id, user_id, started_at, ended_at
`

func (q *Queries) StartSession(ctx context.Context, userID sql.NullInt32) (Session, error) {
	row := q.db.QueryRowContext(ctx, startSession, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartedAt,
		&i.EndedAt,
	)
	return i, err
}
